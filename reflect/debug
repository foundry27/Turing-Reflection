unit
module Debug
    import Opcodes in "%oot/reflect/Opcodes.tu",
        TClass in "%oot/reflect/TClass.tu",
        TFunction in "%oot/reflect/TFunction.tu",
        StackTrace in "%oot/reflect/debugging/StackTrace.tu",
        StackFrame in "%oot/reflect/debugging/StackFrame.tu",
        SimpleStackTrace in "%oot/reflect/internal/debugging/SimpleStackTrace.tu",
        SimpleStackFrame in "%oot/reflect/internal/debugging/SimpleStackFrame.tu",
        Universe in "%oot/reflect/universe"
    export ~.stacktrace

    const ops: array 1..* of Opcodes.TYPE := init(
        PROC, 0,
        LOCATELOC, 0,
        FETCHADDR,
        LOCATEPARM, 0,
        FETCHADDR,
        ASNADDRINV,
        RETURN
    )

    fcn getFrameClass(frameAddress: addressint): unchecked ^TClass
        const GLOBAL_FUNCTION_ADDRESS_OFFSET := 12
        
        const CLASS_FUNCTION_ADDRESS_OFFSET := 16
        
        const CLASS_INSTANCE_OFFSET := 20
        
        if (Opcodes.TYPE @ (addressint @ (frameAddress + GLOBAL_FUNCTION_ADDRESS_OFFSET)) = PROC) then
            result nil
        elsif (Opcodes.TYPE @ (addressint @ (frameAddress + CLASS_FUNCTION_ADDRESS_OFFSET)) = PROC) then
            result reflectc(addressint @ (addressint @ (frameAddress + CLASS_INSTANCE_OFFSET)))
        else
            result nil
        end if
    end getFrameClass
    
    fcn getFrameFunction(frameAddress: addressint): unchecked ^TFunction
        const GLOBAL_FUNCTION_ADDRESS_OFFSET := 12
        
        const CLASS_FUNCTION_ADDRESS_OFFSET := 16
        
        if (Opcodes.TYPE @ (addressint @ (frameAddress + GLOBAL_FUNCTION_ADDRESS_OFFSET)) = PROC) then
            %resolve the common case early to prevent illegal reads
            result reflectf(addressint @ (frameAddress + GLOBAL_FUNCTION_ADDRESS_OFFSET))
        elsif (Opcodes.TYPE @ (addressint @ (frameAddress + CLASS_FUNCTION_ADDRESS_OFFSET)) = PROC) then
            result reflectf(addressint @ (frameAddress + CLASS_FUNCTION_ADDRESS_OFFSET))
        else
            var op := addressint @ (frameAddress + GLOBAL_FUNCTION_ADDRESS_OFFSET)
            loop
                exit when Opcodes.TYPE @ (op) = PROC & Opcodes.TYPE @ (op - Opcodes.OP_SIZE * 2) ~= JUMP
                op -= Opcodes.OP_SIZE
            end loop
            result reflectf(op)
        end if
    end getFrameFunction
    
    fcn getFrameExitLocation(frameAddress: addressint): addressint
        const FUNCTION_EXIT_POINT_ADDRESS_OFFSET := 8
        result addressint @ (frameAddress + FUNCTION_EXIT_POINT_ADDRESS_OFFSET)
    end getFrameExitLocation
    
    fcn adjustAddressForStackSpace(address: addressint): addressint
        if (addressint @ (address + Opcodes.OP_SIZE * 2) = 0) then
            result address
        else
            
            const offsetSize := Opcodes.TYPE @ (addressint @ (address + Opcodes.OP_SIZE * 2) + Opcodes.OP_SIZE)
            
            %put "found: ", addressint @ (address + Opcodes.OP_SIZE * 7)
            
            result address + offsetSize - Opcodes.OP_SIZE
        end if
    end adjustAddressForStackSpace
    
    fcn stacktrace: unchecked ^StackTrace
        type __func: fcn x(): addressint
        
        var address := addressint @ (cheat(__func, addr(ops))())
        
        var frames: flexible array 1..0 of unchecked ^StackFrame
        
        loop
            exit when address = 0
            
            const adjustedAddress := adjustAddressForStackSpace(address)
            
            var newFrame: ^SimpleStackFrame
            var frameFunction := getFrameFunction(adjustedAddress)
            
            var frameClass := getFrameClass(adjustedAddress)
            var frameExitLocation := getFrameExitLocation(address)
            
            new newFrame; newFrame -> construct(frameFunction, frameClass, 0, frameExitLocation);
            new frames, upper(frames) + 1
            frames(upper(frames)) := newFrame
            address := addressint @ (address)
        end loop
        
        var trace: ^SimpleStackTrace
        new trace; trace -> construct(frames);
        result trace
    end stacktrace

end Debug